/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Conexion.Conexion;
import Conexion.Conexion2;
import Conexion.RestServer;
import Conexion.DataBase;
import Conexion.VentasDB;
import Modelos.*;
import Modelos.AlmacenExpo;
import Modelos.ClienteExpor;
import Modelos.Inventario;
import Modelos.ProductoBaseExport;
import Modelos.ProductoExport;
import Modelos.ProductosBaseExport;
import Modelos.RenderTabla;
import Modelos.Ventas;
import Modelos.costosExport;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.json.JSONArray;
import org.json.JSONObject;


/**
 *
 * @author AGIL
 */
public class ListarVentasUI extends javax.swing.JFrame {
    public int id_usuario;
    public int id_empresa;
    public DataBase db = new DataBase();
    public DefaultTableModel modelTabla;
    
    public JButton btnPagar;
    public ImageIcon imgPagar;
    public Icon iconPagar;
    public JButton btnVer;
    public ImageIcon imgVer;
    public Icon iconVer;
    public JButton btnEliminar;
    public ImageIcon imgEliminar;
    public Icon iconEliminar;
    public JButton btnImprimir;
    public ImageIcon imgImprimir;
    public Icon iconImprimir;
    
    /**
     * Creates new form ListaVentasUI
     */
    public ListarVentasUI(int id_usuario,int id_empresa) {
        initComponents();
        setLocationRelativeTo(this);
        this.id_usuario = id_usuario;
        this.id_empresa = id_empresa;
        
        insertarDatos();
        comboSucursal();
        comboMovimientos();
        sincronizarConAgil();
        
        String[] columnas = {"id","N°","Transaccion","Sucursal","Razón Social","Nit Cliente","Factura","Fecha Fact.","Monto","Tipo Pago","Pago","Activo","Pagar","Ver","Eliminar","Imprimir"};
        modelTabla = (DefaultTableModel) tablaVentas.getModel(); //new DefaultTableModel(null,columnas);
        tablaVentas.setDefaultRenderer(Object.class, new RenderTabla());
        tablaVentas.getTableHeader().setPreferredSize(new java.awt.Dimension(0, 33));
        tablaVentas.getTableHeader().setBackground(Color.cyan);
        tablaVentas.getTableHeader().setForeground(Color.blue);
        tablaVentas.setRowHeight(33);

        alinearTextoTabla();
        centrar_datos();
        insertarBotones();
        insertarEmpresas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
       
    
    public String[] datosClase(int tipo){
        ResultSet rs = null;
        String consulta = "SELECT ID,ID_TIPO,NOMBRE,NOMBRE_CORTO,HABILITADO,CREATEDAT,UPDATEDAT \n" +
            "FROM CLASE \n" +
            "WHERE ID = "+tipo;
        String[] result = new String[7];
        
        try {
            rs = db.seleccionar(consulta);
            while(rs.next()){
                String id = Integer.toString(rs.getInt(1));
                String idTipo = Integer.toString(rs.getInt(2));
                String nombre = rs.getString(3);
                String nombreCorto = rs.getString(4);
                String habilitado = Boolean.toString(rs.getBoolean(5));
                String created = rs.getString(6);
                String updated = rs.getString(7);
                
                result[0] = id;
                result[1] = idTipo;
                result[2] = nombre;
                result[3] = nombreCorto;
                result[4] = habilitado;
                result[5] = created;
                result[6] = updated;
  
            }
        } catch (Exception e) {
            System.out.println("Error al obtener los datos de la clas: "+e.getMessage());
        }
        return result;
    }
    
    public String[] datosClaseExport(int idTP){
        ResultSet rs = null;
        String consulta = "SELECT ID_C,ID_TIPO,NOMBRE,NOMBRE_CORTO,HABILITADO,CREATEDAT,UPDATEDAT \n" +
            "FROM CLASE \n" +
            "WHERE ID = "+idTP;
        String[] result = new String[7];
        
        try {
            rs = db.seleccionarExpor(consulta);
            while(rs.next()){
                String id = Integer.toString(rs.getInt(1));
                String idTipo = Integer.toString(rs.getInt(2));
                String nombre = rs.getString(3);
                String nombreCorto = rs.getString(4);
                String habilitado = Boolean.toString(rs.getBoolean(5));
                String created = rs.getString(6);
                String updated = rs.getString(7);
                
                result[0] = id;
                result[1] = idTipo;
                result[2] = nombre;
                result[3] = nombreCorto;
                result[4] = habilitado;
                result[5] = created;
                result[6] = updated;
  
            }
        } catch (Exception e) {
            System.out.println("Error al obtener los datos de la clas: "+e.getMessage());
        }
        return result;
    }
        
    
    public void insertarBotones(){     
        
        String Pagar = "/imagen/pagar.png";
        imgPagar = new ImageIcon(this.getClass().getResource(Pagar));
        iconPagar = new ImageIcon(imgPagar.getImage().getScaledInstance(20, 20, 1));
        btnPagar = new JButton(iconPagar);
        btnPagar.setName("pagar");
        
        String Ver = "/imagen/ver.png";
        imgVer = new ImageIcon(this.getClass().getResource(Ver));
        iconVer = new ImageIcon(imgVer.getImage().getScaledInstance(20, 20, 1));
        btnVer = new JButton(iconVer);
        btnVer.setName("ver");
        
        String Imprimir = "/imagen/impresora.png";
        imgImprimir = new ImageIcon(this.getClass().getResource(Imprimir));
        iconImprimir = new ImageIcon(imgImprimir.getImage().getScaledInstance(20, 20, 1));
        btnImprimir = new JButton(iconImprimir);
        btnImprimir.setName("impresion");
        
        String Eliminar = "/imagen/eliminar.png";
        imgEliminar = new ImageIcon(this.getClass().getResource(Eliminar));
        iconEliminar = new ImageIcon(imgEliminar.getImage().getScaledInstance(20, 20, 1));
        btnEliminar = new JButton(iconEliminar);
        btnEliminar.setName("eliminar");
    }
    
    public void centrar_datos(){  
        DefaultTableCellRenderer modelocentrar = new DefaultTableCellRenderer(); 
        modelocentrar.setHorizontalAlignment(SwingConstants.CENTER); 
        tablaVentas.getColumnModel().getColumn(1).setCellRenderer(modelocentrar); 
        tablaVentas.getColumnModel().getColumn(2).setCellRenderer(modelocentrar);
        tablaVentas.getColumnModel().getColumn(3).setCellRenderer(modelocentrar);
        tablaVentas.getColumnModel().getColumn(4).setCellRenderer(modelocentrar);
        tablaVentas.getColumnModel().getColumn(5).setCellRenderer(modelocentrar);
        tablaVentas.getColumnModel().getColumn(6).setCellRenderer(modelocentrar);
        tablaVentas.getColumnModel().getColumn(7).setCellRenderer(modelocentrar);
        tablaVentas.getColumnModel().getColumn(8).setCellRenderer(modelocentrar);   
        tablaVentas.getColumnModel().getColumn(9).setCellRenderer(modelocentrar);
        tablaVentas.getColumnModel().getColumn(10).setCellRenderer(modelocentrar);
        tablaVentas.getColumnModel().getColumn(11).setCellRenderer(modelocentrar);
        tablaVentas.getColumnModel().getColumn(12).setCellRenderer(modelocentrar);
    } 
    
    public void alinearTextoTabla(){
        TableCellRenderer rendererFromHeader = tablaVentas.getTableHeader().getDefaultRenderer();
        JLabel headerLabel = (JLabel) rendererFromHeader;
        headerLabel.setHorizontalAlignment(JLabel.CENTER);
    }
    
    public void insertarDatos(){
        insertarCliente();
        insertarMovimientos();
    }
    
    public void insertarCliente(){
        if (getConnectionStatus() == true) {
           
            String url = "/clientes/empresa/"+this.id_empresa;
            JSONArray res = RestServer.getJSONArray(url);
            int id = 0;
            try {
                Connection conn = null;   
                try { 
                    conn = Conexion.getConnection();
                    if (conn.getAutoCommit()) { 
                        conn.setAutoCommit(false); 
                    } 
                    VentasDB ventasdb = new VentasDB(conn);

                    ventasdb.deleteCliente();
                    
                    for (int i = 0; i < res.length(); i++) {
                        JSONObject cliente = res.getJSONObject(i);
                        id = cliente.getInt("id");
                        String razonSocial = cliente.getString("razon_social");
                        String nit = cliente.get("nit").toString();

                        ventasdb.insertCliente(id, razonSocial, nit);
                        conn.commit();
                    }
                } catch (SQLException e) {
                //Hacemos rollback en caso de error
                    try {
                        System.out.println("id :"+id);
                        System.out.println("Entramos al rollback");
                    //Imprimimos la excepcion a la consola
                        e.printStackTrace(System.out);
                    //Hacemos rollback
                        conn.rollback();
                    } catch (SQLException e1) {
                        e1.printStackTrace(System.out);
                    }
                }

            } catch (Exception e) {
                System.out.println("Error al obtener los clientes: "+e);
                
            }
        }
    }
    
    public String[] datosTipoProducto(int idTipoProducto){
        ResultSet rs = null;
        String[] result = new String[7];
        String consulta = "SELECT ID,ID_TIPO,NOMBRE,NOMBRE_CORTO,HABILITADO,CREATEDAT,UPDATEDAT\n" +
            "FROM CLASE \n" +
            "WHERE ID = "+idTipoProducto;
        rs = db.seleccionar(consulta);
        try {
            while (rs.next()) {                
                String idC = Integer.toString(rs.getInt(1));
                String idTipo = Integer.toString(rs.getInt(2));
                String nombreC = rs.getString(3);
                String nombreCortoC = rs.getString(4);
                String habilidatoC = Boolean.toString(rs.getBoolean(5));
                String created = rs.getString(6);
                String updated = rs.getString(7);

                result[0] = idC;
                result[1] = idTipo;
                result[2] = nombreC;
                result[3] = nombreCortoC;
                result[4] = habilidatoC;
                result[5] = created;
                result[6] = updated;
            }
            
        } catch (Exception e) {
            System.out.println("Error al recoger el tipo producto en listas: "+e);
        }
        return result;
    }
    
    public void insertarMovimientos(){     
        if(getConnectionStatus() == true){
            String url = "/movimientos";
            JSONArray res = RestServer.getJSONArray(url);
            
            try {
      
                Connection conn = null;   
                try { 
                    conn = Conexion.getConnection();
                    if (conn.getAutoCommit()) { 
                        conn.setAutoCommit(false); 
                    } 
                    VentasDB ventasdb = new VentasDB(conn);

                    ventasdb.deleteMovimientos();

                    for (int i = 0; i < res.length(); i++) {
                        JSONObject movimientos = res.getJSONObject(i);
                        int id = movimientos.getInt("id");
                        int id_tipo = movimientos.getInt("id_tipo");
                        int id_clase = movimientos.getInt("id_clase");
                        int id_almacen = (movimientos.get("id_almacen").toString().equals("null"))? 0:Integer.parseInt(movimientos.get("id_almacen").toString());
                        String fecha = (movimientos.get("fecha").toString().equals("null"))? "":movimientos.get("fecha").toString();
                        String created = movimientos.get("createdAt").toString();
                        String updatedAt = movimientos.getString("updatedAt").toString();
                        
                        ventasdb.insertMovimientos(id, id_tipo, id_clase, id_almacen, fecha, created, updatedAt);

                        conn.commit();
                    }

                } catch (SQLException e) {
                    //Hacemos rollback en caso de error
                    try {
                        System.out.println("Entramos al rollback");
                    //Imprimimos la excepcion a la consola
                        e.printStackTrace(System.out);
                    //Hacemos rollback
                        conn.rollback();
                    } catch (SQLException e1) {
                        e1.printStackTrace(System.out);
                    }
                }

            } catch (Exception e) {
                System.out.println("Error al obtener los movimientos "+e);
            }
        }
        
    }
    
    private boolean getConnectionStatus() {
        String estado = "";
        boolean respuesta = false;
        try { 
            URL ruta=new URL("http://agilsof.net/"); 
            URLConnection rutaC = ruta.openConnection(); 
            rutaC.connect(); 
            estado="Online"; 
            respuesta = true;
        }catch(Exception e){ 
            estado="Offline"; 
            respuesta  = false;
        } 
        return respuesta;   
    }
    
    public void limpiarTabla(){
        int tam = tablaVentas.getRowCount();
        for (int i = tam-1; i >= 0; i--) {
            modelTabla.removeRow(i);
        }
        tablaVentas.removeAll();
        tablaVentas.repaint();
    }
    
    public void comboSucursal(){
        ResultSet rs ;
        String nom_sucursal;
        comboSucursal.removeAllItems();
        int idEmpresa = this.id_empresa; //obtenerIdEmpresa();
        String sucursal = "SELECT NOMBRE FROM SUCURSAL WHERE EMPRESA = "+idEmpresa;
         rs = db.seleccionar(sucursal);
        try {
            comboSucursal.addItem("TODOS");
            while (rs.next()) {            
                nom_sucursal = rs.getString(1);
                comboSucursal.addItem(nom_sucursal);            
            }
     
        } catch (Exception e) {
            System.out.println("Error al obtener la sucursal en la ventana de listas: "+e);
        }
    }
    
    public void comboMovimientos(){
        ResultSet rs = null;
        String nombre_movimiento;
        String consulta = "SELECT NOMBRE FROM CLASE WHERE ID_TIPO = "+7+" AND HABILITADO = "+true;
        rs = db.seleccionar(consulta);
        try {
            while (rs.next()) {            
                nombre_movimiento = rs.getString(1);
                comboMovimientos.addItem(nombre_movimiento);
            }
        } catch (Exception e) {
            System.out.println("Error al obtener los movimientos en la ventana de listar: "+e);
        }
        
    }
    
    public void sincronizarConAgil(){
        if (getConnectionStatus() == true) {
            Converter convertir = new Converter();
            
            String url = "/obtenerDetalleVenta/empresa/"+this.id_empresa;

            try {
                JSONArray ventas = RestServer.getJSONArray(url);
                            
                Connection conn = null;   
                try { 
                    conn = Conexion.getConnection();
                    if (conn.getAutoCommit()) { 
                        conn.setAutoCommit(false); 
                    } 
                    VentasDB ventasdb = new VentasDB(conn);
                    
                    ventasdb.deleteVentas();
                    ventasdb.deleteDetalleVentas();
                    
                    for (int i = 0; i < ventas.length(); i++) {
                        JSONObject venta = ventas.getJSONObject(i);
                        int id = venta.getInt("id");
                        int id_almacen = venta.getInt("id_almacen");
                        int id_actividad = (venta.get("id_actividad").toString().equals("null"))? 0:Integer.parseInt(venta.get("id_actividad").toString());
                        int id_cliente = (venta.get("id_cliente").toString().equals("null"))? 0:Integer.parseInt(venta.get("id_cliente").toString());
                        int id_movimiento = venta.getInt("id_movimiento");
                        String factura = (venta.get("factura").toString().equals("null"))? "":venta.get("factura").toString();
                        String autorizacion = (venta.get("autorizacion").toString().equals("null"))? "":venta.get("autorizacion").toString();
                        String f = (venta.get("fecha").toString().equals("null"))? "":venta.get("fecha").toString();
                        Timestamp fecha = null;
                        if (!f.equals("")) {
                            Instant instant = Instant.parse(f);
                            LocalDateTime fe = LocalDateTime.ofInstant(instant, ZoneId.of(ZoneOffset.UTC.getId()));
                            fecha = Timestamp.valueOf(fe);
                        }else{
                            fecha = null;
                        }
                       
                        
                        String fecha_limite_emision = (venta.get("fecha_limite_emision").toString().equals("null"))? "":venta.get("fecha_limite_emision").toString();
                        String codigo_control = (venta.get("codigo_control").toString().equals("null"))? "":venta.get("codigo_control").toString();
                        double importe = (venta.get("importe").toString().equals("null"))? 0:Double.parseDouble(venta.get("importe").toString());
                        int id_tipo_pago = (venta.get("id_tipo_pago").toString().equals("null"))? 0:Integer.parseInt(venta.get("id_tipo_pago").toString());
                        int dias_credito = (venta.get("dias_credito").toString().equals("null"))? 0:Integer.parseInt(venta.get("dias_credito").toString());
                        double a_cuenta = (venta.get("a_cuenta").toString()).equals("null")? 0:Double.parseDouble(venta.get("a_cuenta").toString());
                        double saldo = (venta.get("saldo").toString().equals("null"))? 0:Double.parseDouble(venta.get("saldo").toString());
                        double total = (venta.get("total").toString().equals("null"))? 0:Double.parseDouble(venta.get("total").toString());
                        String createdAt = (venta.get("createdAt").toString().equals("null"))? "":venta.get("createdAt").toString();
                        String updatedAt = (venta.get("updatedAt").toString().equals("null"))? "":venta.get("updatedAt").toString();
                        int id_usuario = (venta.get("id_usuario").toString().equals("null"))? 0:Integer.parseInt(venta.get("id_usuario").toString());
                        boolean activa = venta.getBoolean("activa");
                        double pagado = (venta.get("pagado").toString().equals("null"))? 0:Double.parseDouble(venta.get("pagado").toString());
                        double cambio = (venta.get("cambio").toString().equals("null"))? 0:Double.parseDouble(venta.get("cambio").toString());
                        int almacen_traspaso = (venta.get("id_almacen_traspaso").toString().equals("null"))? 0:Integer.parseInt(venta.get("id_almacen_traspaso").toString());
                        int pedido = (venta.get("pedido").toString().equals("null"))? 0:Integer.parseInt(venta.get("pedido").toString());
                        boolean despachado = venta.getBoolean("despachado");
                        int id_cierre_caja = (venta.get("id_cierre_caja").toString().equals("null"))? 0:Integer.parseInt(venta.get("id_cierre_caja").toString());
                        int id_vendedor = (venta.get("id_vendedor").toString().equals("null"))? 0:Integer.parseInt(venta.get("id_vendedor").toString());
                        boolean contabilizado = (venta.get("contabilizado").toString().equals("null"))? false:Boolean.parseBoolean(venta.get("contabilizado").toString());
                        boolean usar_servicios = (venta.get("usar_servicios").toString().equals("null"))? false:Boolean.parseBoolean(venta.get("usar_servicios").toString());
                        String totalLiterario = convertir.Convertir(Double.toString(total), true);
                     
                        ventasdb.insertarVenta(id, id_almacen, id_actividad, id_cliente, id_movimiento, factura, autorizacion, fecha, fecha_limite_emision, codigo_control, importe, id_tipo_pago, dias_credito, a_cuenta, saldo, total, createdAt, updatedAt, id_usuario, activa, pagado, cambio, almacen_traspaso, pedido, despachado, id_cierre_caja, id_vendedor, contabilizado, usar_servicios,totalLiterario);
                        
                         JSONArray detalleVentas = venta.getJSONArray("detallesVenta");
 
                         for (int j = 0; j < detalleVentas.length(); j++) {
                            JSONObject detalle = detalleVentas.getJSONObject(j);
                            
                            int idDetalle = (detalle.get("id").toString().equals("null"))? 0:Integer.parseInt(detalle.get("id").toString());
                            int idVenta = detalle.getInt("id_venta");
                            int idProducto = (detalle.get("id_producto").toString().equals("null"))? 0:Integer.parseInt(detalle.get("id_producto").toString());
                            double precioUnitario = (detalle.get("precio_unitario").toString().equals("null"))? 0:Double.parseDouble(detalle.get("precio_unitario").toString());
                            double cantidad = (detalle.get("cantidad").toString().equals("null"))? 0:Double.parseDouble(detalle.get("cantidad").toString());
                            double importeDetalle = (detalle.get("importe").toString().equals("null"))? 0:Double.parseDouble(detalle.get("importe").toString());
                            double descuento = (detalle.get("descuento").toString().equals("null"))? 0:Double.parseDouble(detalle.get("descuento").toString());
                            double recargo = (detalle.get("recargo").toString().equals("null"))? 0:Double.parseDouble(detalle.get("recargo").toString());
                            double ice = (detalle.get("ice").toString().equals("null"))? 0:Double.parseDouble(detalle.get("ice").toString());
                            double excento = (detalle.get("excento").toString().equals("null"))? 0:Double.parseDouble(detalle.get("excento").toString());
                            boolean tipoDescuento = (detalle.get("tipo_descuento").toString().equals("null"))? false:Boolean.parseBoolean(detalle.get("tipo_descuento").toString());
                            boolean tipoRecargo = (detalle.get("tipo_recargo").toString().equals("null"))? false:Boolean.parseBoolean(detalle.get("tipo_recargo").toString());
                            double totalDetalle = (detalle.get("total").toString().equals("null"))? 0:Double.parseDouble(detalle.get("total").toString());
                            String createdAtDetalle = detalle.get("createdAt").toString();
                            String updatedAtDetalle = detalle.get("updatedAt").toString();
                            String fechaLimite = (detalle.get("fecha_vencimiento").toString().equals("null"))? "":detalle.get("fecha_vencimiento").toString();
                            String lote = (detalle.get("lote").toString().equals("null"))? "":detalle.get("lote").toString();
                            int inventario = (detalle.get("id_inventario").toString().equals("null"))? 0:Integer.parseInt(detalle.get("id_inventario").toString());
                            String observacion = (detalle.get("observaciones").toString().equals("null"))? "":detalle.get("observaciones").toString();
                            int servicio = (detalle.get("id_servicio").toString().equals("null"))? 0:Integer.parseInt(detalle.get("id_servicio").toString());
                            
                            ventasdb.insertarDetalleVenta(idDetalle, idVenta, idProducto, precioUnitario, cantidad, importeDetalle, descuento, recargo, ice, excento, tipoDescuento, tipoRecargo, totalDetalle, createdAtDetalle, updatedAtDetalle, fechaLimite, lote, inventario, observacion, servicio);

                         }
                        
                        conn.commit();
                    }
                 
                } catch (SQLException e) {
                    //Hacemos rollback en caso de error
                    try {
                        System.out.println("Entramos al rollback");
                    //Imprimimos la excepcion a la consola
                        e.printStackTrace(System.out);
                    //Hacemos rollback
                        conn.rollback();
                    } catch (SQLException e1) {
                        e1.printStackTrace(System.out);
                    }
                }
                    
            } catch (Exception e) {
                System.out.println("Error al recoger las ventas en la cincronizacion: "+e);               
            }
                        
                        
        }else{
            JOptionPane.showMessageDialog(null, "No se actualizo las ventas con el del servidor.!");
        }
    }
    
    public void sincronizar(){
        SimpleDateFormat formateador = new SimpleDateFormat("dd/MM/yy");
        Connection conn = null;   
        
    try{
        try { 
            conn = Conexion2.getConnection(); 
            //Revisamos si la conexion esta en modo autocommit 
            //por default es autocommit == true 
            if (conn.getAutoCommit()) { 
                conn.setAutoCommit(false); 
            } 
            VentasDB ventasdb = new VentasDB(conn);
            List<Ventas> ventas = ventasdb.seleccionarVentasExport();
            
            
            JSONObject JSONventa = new JSONObject();
            JSONObject JSONActividad = new JSONObject();
            JSONObject JSONAlmacen = new JSONObject();
            JSONObject JSONCliente = new JSONObject();
            JSONArray ARRAYCosto = new JSONArray();
            JSONObject JSONProducto = new JSONObject();
            JSONArray ARRAYDetalleV = new JSONArray();
            JSONArray ARRAYProductoBase = new JSONArray();
            JSONArray ARRAYInventario = new JSONArray();
            JSONObject JSONTipoProductoV = new JSONObject();
            JSONObject JSONMovimientos = new JSONObject();
            JSONObject JSONtipoPago = new JSONObject();
            JSONObject JSONsucursal = new JSONObject();
  
                for (Ventas venta : ventas) {
                    int idDV = venta.getId();
                    int acuenta = venta.getaCuenta();
                    int Id_Actividad = venta.getActividad();
                    int Id_Almacen = venta.getAlmacen();
                    double cambio = venta.getCambio();
                    int cliente = venta.getCliente();
                    boolean despachado = venta.isDespachado();
                    String fecha = venta.getFecha();
                    String fechaTexto = venta.getFechaTexto();
                    int empresa = venta.getEmpresa();
                    int usuario = venta.getUsuario();
                    double importe = venta.getImporte();
                    int movimiento = venta.getMovimiento();
                    double pagado = venta.getPagado();
                    double saldo = venta.getSaldo();
                    int sucursalV = venta.getSucursal();
                    int tipoPagoV = venta.getTipoPago();
                    double totalV = venta.getTotal();
                    double vendedor = venta.getVendedor();
                    
                    List<Actividad> ListActividad = ventasdb.seleccionarActividadPorIdDetalle(Id_Actividad);
                    for (Actividad actividadLista : ListActividad) {
                       int idActividad = actividadLista.getIdActividad();
                       int idTipoA = actividadLista.getIdTipo();
                       String nombreA = actividadLista.getNombre();
                       String nombreCortoA = actividadLista.getNombreCorto();
                       boolean eliminarA = actividadLista.isEliminado();
                       boolean  habilitarA =  actividadLista.isHabilitado();
                       
                       JSONActividad.put("eliminado", eliminarA);
                       JSONActividad.put("habilitado", habilitarA);
                       JSONActividad.put("id", idActividad);
                       JSONActividad.put("id_tipo", idTipoA);
                       JSONActividad.put("nombre", nombreA);
                       JSONActividad.put("nombre_corto", nombreCortoA);
                       
                       JSONventa.put("actividad",JSONActividad);
                    }
                   
                    List<AlmacenExpo> ListaAlmacen = ventasdb.seleccionarAlmacenPorIdDetalle(Id_Almacen);
                    for (AlmacenExpo almacenLista : ListaAlmacen) {
                        int idAlmacen = almacenLista.getIdAlmacen();
                        int sucursal = almacenLista.getSucursal();
                        String nombre = almacenLista.getNombre();
                        int numero = almacenLista.getNumero();
                        String direccion = almacenLista.getDireccion();
                        
                        JSONAlmacen.put("direccion", direccion);
                        JSONAlmacen.put("id", idAlmacen);
                        JSONAlmacen.put("id_sucursal", sucursal);
                        JSONAlmacen.put("nombre", nombre);
                        JSONAlmacen.put("numero", numero);
                        
                        JSONventa.put("almacen", JSONAlmacen);
                    }
                    JSONventa.put("cambio", cambio);
                    
                    List<ClienteExpor> ListaCliente = ventasdb.seleccionarClientePorIdCliente(cliente);
                    for (ClienteExpor clienteLista : ListaCliente) {
                        String nit = clienteLista.getNit();
                        String razonSocial = clienteLista.getRazonSocial();
                        
                        JSONCliente.put("nit", Integer.parseInt(nit));
                        JSONCliente.put("razon_social", razonSocial);
                        
                        JSONventa.put("cliente", JSONCliente);
                    }
                    
                    JSONventa.put("despachado", despachado);
                    
                    List<DetalleVentaExport>detalleLista = ventasdb.seleccionarDetallePorIdVenta(idDV);                   
                    for (DetalleVentaExport listaDetalle : detalleLista) {
                        JSONObject JSONDetalleV = new JSONObject();
                        
                        int idDVenta = listaDetalle.getIdVenta();
                        int cantidad = listaDetalle.getCantidad();
                        double descuento = listaDetalle.getDescuento();
                        int excento = listaDetalle.getExcento();
                        int ice = listaDetalle.getIce();
                        double importeDV = listaDetalle.getImporte();
                        double inventarioDisponible = listaDetalle.getInventarioDisponible();
                        double precio_unitario = listaDetalle.getPrecioUnitario();
                        int recargo = listaDetalle.getRecargo();
                        boolean tipoDescuento = listaDetalle.isTipoDescuento();
                        boolean tipoRecargo = listaDetalle.isTipoRecargo();
                        double total = listaDetalle.getTotal();
                        
                        JSONDetalleV.put("cantidad", cantidad);
                        
                        List<costosExport> costoLista = ventasdb.seleccionarCostoPorIdDetalle(idDVenta);
                        for (costosExport listaCosto : costoLista) {
                            JSONObject JSONCosto = new JSONObject();
                            int idC = listaCosto.getIdCostos();
                            int idAlmacenC = listaCosto.getIdalmacen();
                            int productoC = listaCosto.getIdProducto();
                            double cantidadC = listaCosto.getCantidad();
                            double costoTotalC = listaCosto.getCostoTotal();
                            double costoUnitario = listaCosto.getCostoUnitario();
                            String createdC = listaCosto.getCreatedat();
                            String fechaVenciC = listaCosto.getFechaVencimiento();
                            String loteC = listaCosto.getLote();
                            String updatedC = listaCosto.getUpdatedat();
                            
                            JSONCosto.put("cantidad", cantidadC);
                            JSONCosto.put("costo_total", costoTotalC);
                            JSONCosto.put("costo_unitario", costoUnitario);
                            JSONCosto.put("createdAt", createdC);
                            JSONCosto.put("fecha_vencimiento", fechaVenciC);
                            JSONCosto.put("id", idC);
                            JSONCosto.put("id_almacen", idAlmacenC);
                            JSONCosto.put("id_producto", productoC);
                            JSONCosto.put("lote",loteC);
                            JSONCosto.put("updatedAt", updatedC);
                            
                            ARRAYCosto.put(JSONCosto);
                            JSONDetalleV.put("costos", ARRAYCosto);
                            
                        }
                        JSONDetalleV.put("descuento", descuento);
                        JSONDetalleV.put("excento", excento);
                        JSONDetalleV.put("ice", ice);
                        JSONDetalleV.put("importe", importe);
                        JSONDetalleV.put("inventario_disponible", inventarioDisponible);
                        JSONDetalleV.put("precio_unitario", precio_unitario);

                        List<ProductoExport> productoLista = ventasdb.seleccionarProductoPorIdDetalle(idDVenta);
                        for (ProductoExport listaProducto : productoLista) {
                            int id_P = listaProducto.getId_P();
                            int idDetalle = listaProducto.getIdDetalle();
                            int idProducto = listaProducto.getIdProducto();
                            int empresaPro = listaProducto.getEmpresa();
                            boolean activarInventario = listaProducto.isActivar_inventario();
                            int activoFijo = listaProducto.getActivo_fijo();
                            int alerta = listaProducto.getAlerta();
                            String anio = listaProducto.getAnio();
                            String caracte1 = listaProducto.getCaracte1();
                            String caracte2 = listaProducto.getCaracte2();
                            String codigo = listaProducto.getCodigo();
                            String codigoFabrica = listaProducto.getCodigo_fabrica();
                            double comision = listaProducto.getComision();
                            String created = listaProducto.getCreated();
                            String updated = listaProducto.getUpdated();
                            double descuentoP = listaProducto.getDescuento();
                            boolean descuentoFijo = listaProducto.isDescuento_fijo();
                            int almacenERP = listaProducto.getAlertaERP();
                            int cuenta = listaProducto.getCuenta();
                            int grupo = listaProducto.getGrupo();
                            int subgrupo = listaProducto.getSubgrupo();
                            String imagen = listaProducto.getImagen();
                            double inventarioDisponibleP = listaProducto.getInventario_disponible();
                            int inventarioMinimo = listaProducto.getInventario_minimo();
                            int tipoProducto =  listaProducto.getTipo_producto();
                            
                            JSONProducto.put("activar_inventario", activarInventario);
                            JSONProducto.put("activo_fijo", activoFijo);
                            JSONProducto.put("alerta", alerta);
                            JSONProducto.put("anio", anio);
                            JSONProducto.put("caracteristica_especial1", caracte1);
                            JSONProducto.put("caracteristica_especial2", caracte1);
                            JSONProducto.put("codigo", codigo);
                            JSONProducto.put("codigo_fabrica", codigoFabrica);
                            JSONProducto.put("comision", comision);
                            JSONProducto.put("createdAt",created);
                            JSONProducto.put("descuento", descuento);
                            JSONProducto.put("descuento_fijo", descuentoFijo);
                            JSONProducto.put("id", idProducto);
                            JSONProducto.put("id_almacen_erp", almacenERP);
                            JSONProducto.put("id_cuenta", cuenta);
                            JSONProducto.put("id_empesa", empresaPro);
                            JSONProducto.put("id_grupo", grupo);
                            JSONProducto.put("id_subgrupo", subgrupo);
                            JSONProducto.put("id_tipo_producto", tipoProducto);
                            JSONProducto.put("inventario_disponible", inventarioDisponible);
                            JSONProducto.put("inventario_minimo", inventarioMinimo);
                            
                           //JSONDetalleV.put("producto", JSONProducto);
                           
                           List<ProductoBaseExport> productoBaseLista = ventasdb.seleccionarProductoBasePorIdDetalle(id_P, idProducto);
                            for (ProductoBaseExport listaProductoBase : productoBaseLista) {
                                JSONObject JSONProductoBase = new JSONObject();
                                int idPB = listaProductoBase.getId_PB();
                                int idProductoPB = listaProductoBase.getIdProducto();
                                int idProductoBasePB = listaProductoBase.getIdProductoBase();
                                String formulacion = listaProductoBase.getFormulacion();
                                String createdat = listaProductoBase.getCreatedat();
                                String updatedat = listaProductoBase.getUpdatedat();
                                
                                JSONProductoBase.put("createdAt", createdat);
                                JSONProductoBase.put("formulacion", formulacion);
                                JSONProductoBase.put("id", idPB);
                                JSONProductoBase.put("id_producto", idProductoPB);
                                JSONProductoBase.put("id_producto_base", idProductoBasePB);
                                JSONProductoBase.put("updatedAt", updatedat);
                                
                                List<ProductosBaseExport> productosBaseLista = ventasdb.seleccionarProductosBasePorIdDetalle(idPB,idProductoBasePB);
                                JSONObject JSONProductosBase = new JSONObject();
                                JSONObject JSONtipoProductoPB = new JSONObject();
                                for (ProductosBaseExport listaProductosBase : productosBaseLista) {
                                    int id = listaProductosBase.getIdProductoBase();
                                    boolean activarInventarioPB = listaProductosBase.isActivarInventario();
                                    int tipoProductoPB = listaProductosBase.getTipoProducto();
                                    String nombrePB = listaProductosBase.getNombre();
                                    
                                    JSONProductosBase.put("activar_inventario", activarInventario);
                                    JSONProductosBase.put("id", id);
                                    JSONProductoBase.put("id_tipo_producto", tipoProductoPB);
                                    JSONProductosBase.put("nombre", nombrePB);
                                    
                                    String[] TipoProducto = datosTipoProducto(tipoProductoPB);
                                    
                                    JSONtipoProductoPB.put("createdAt", TipoProducto[5]);
                                    JSONtipoProductoPB.put("eliminado", false);
                                    JSONtipoProductoPB.put("habilitado", TipoProducto[4]);
                                    JSONtipoProductoPB.put("id", Integer.parseInt(TipoProducto[0]));
                                    JSONtipoProductoPB.put("id_tipo", Integer.parseInt(TipoProducto[1]));
                                    JSONtipoProductoPB.put("nombre", TipoProducto[2]);
                                    JSONtipoProductoPB.put("nombre_corto", TipoProducto[3]);
                                    JSONtipoProductoPB.put("updatedAt", TipoProducto[6]);
                                    
                                    JSONProductosBase.put("tipoProducto", JSONtipoProductoPB);                                   
                                    JSONProductoBase.put("productoBase", JSONProductosBase);
                                    
                                }                               
                                ARRAYProductoBase.put(JSONProductoBase);
                                JSONProducto.put("productosBase", ARRAYProductoBase);
                            }
                            //JSONDetalleV.put("producto", JSONProducto);
                            List<Inventario> inventarioProductoLista = ventasdb.seleccionarInventarioPorIdProducto(idDetalle);
                            for (Inventario listaInventario : inventarioProductoLista) {
                                JSONObject JSONInventario = new JSONObject();
                                int idInventario = listaInventario.getId();
                                int almacenInv = listaInventario.getAlmacen();
                                int productoInv = listaInventario.getProducto();
                                double cantidadInv = listaInventario.getCantidad();
                                double costoTotal = listaInventario.getCosto_total();
                                double costoUnitario = listaInventario.getCosto_unitario();
                                String createdateInv = listaInventario.getCreated();
                                String fechaVenciInv = listaInventario.getFecha_vencimiento();
                                String lote = listaInventario.getLote();
                                String updatedateInv = listaInventario.getUpdated();
                                
                                JSONInventario.put("cantidad", cantidadInv);
                                JSONInventario.put("costo_total", costoTotal);
                                JSONInventario.put("costo_unitario", costoUnitario);
                                JSONInventario.put("createdAt", createdateInv);
                                JSONInventario.put("fecha_vencimiento", fechaVenciInv);
                                JSONInventario.put("id", idInventario);
                                JSONInventario.put("id_almacen", almacenInv);
                                JSONInventario.put("id_producto",productoInv);
                                JSONInventario.put("lote", lote);
                                JSONInventario.put("updatedAt", updatedateInv);
                                
                                ARRAYInventario.put(JSONInventario);
                                JSONProducto.put("inventarios", ARRAYInventario);
                                
                            }
                            
                                String[] tipoProductoP = datosTipoProducto(tipoProducto);
                                String createdTP = tipoProductoP[5];
                                String habilitadoTP = tipoProductoP[4];
                                int idTP = Integer.parseInt(tipoProductoP[0]);
                                int id_tipoTP = Integer.parseInt(tipoProductoP[1]);
                                String nombre_cortoTP = tipoProductoP[3];
                                String mombreTP = tipoProductoP[2];
                                String updateTP = tipoProductoP[6];
                                JSONTipoProductoV.put("createdAt", createdTP);
                                JSONTipoProductoV.put("eliminado", false);
                                JSONTipoProductoV.put("habilitado", habilitadoTP);
                                JSONTipoProductoV.put("id", idTP);
                                JSONTipoProductoV.put("id_tipo", id_tipoTP);
                                JSONTipoProductoV.put("nombre", mombreTP);
                                JSONTipoProductoV.put("nombre_corto", nombre_cortoTP);
                                JSONTipoProductoV.put("updatedAt", updateTP);
                            JSONProducto.put("tipoProducto", JSONTipoProductoV);
                            
                        }
                        JSONDetalleV.put("producto", JSONProducto);
                        JSONDetalleV.put("recargo", 0);
                        JSONDetalleV.put("tipo_descuento", true);
                        JSONDetalleV.put("tipo_recargo", false);                  
                        JSONDetalleV.put("total", total);   
                        
                        
                        ARRAYDetalleV.put(JSONDetalleV);
                        JSONventa.put("detallesVenta", ARRAYDetalleV);
                    }
                    
                    Object[] arrayDetallesVentasNoconsolidadas = {};
                        //JSONdetalleVentaNoconsolidada.put("detallesVentaNoConsolidadas", arrayDetallesVentasNoconsolidadas);
                    JSONventa.put("detallesVentaNoConsolidadas", arrayDetallesVentasNoconsolidadas);       
                        
                    JSONventa.put("fecha", fecha.toString());                  
                    JSONventa.put("fechaTexto", fechaTexto);
                    JSONventa.put("id_empresa", this.id_empresa);
                    JSONventa.put("id_usuario", this.id_usuario);
                    JSONventa.put("importe", importe);
                    
                    String[] movimientos = datosClase(movimiento);
                        JSONMovimientos.put("createdAt", movimientos[5]);
                        JSONMovimientos.put("eliminado", false);
                        JSONMovimientos.put("habilitado", movimientos[4]);
                        JSONMovimientos.put("id", Integer.parseInt(movimientos[0]));
                        JSONMovimientos.put("id_tipo", Integer.parseInt(movimientos[1]));
                        JSONMovimientos.put("nombre", movimientos[2]);
                        JSONMovimientos.put("nombre_corto", movimientos[3]);
                        JSONMovimientos.put("updatedAt", movimientos[6]);
                    JSONventa.put("movimiento", JSONMovimientos);
                    
                    JSONventa.put("pagado", pagado);
                    JSONventa.put("saldo", saldo);
                    
                    JSONsucursal.put("id", sucursalV);
                    JSONventa.put("sucursal", JSONsucursal);
                    
                    String[] datosTipoPago = datosClaseExport(tipoPagoV);
                    String idTP = datosTipoPago[0];
                    int idTipoPago = Integer.parseInt(datosTipoPago[0]);
                    int idTipo = Integer.parseInt(datosTipoPago[1]);
                    String nombreTP = datosTipoPago[2];
                    String nombreCortoTP = datosTipoPago[3];
                    boolean habilidatadoTP = Boolean.parseBoolean(datosTipoPago[4]);
                    String createdTP = datosTipoPago[5];
                    String updatedTP = datosTipoPago[6];
  
                    JSONtipoPago.put("id", idTipoPago); 
                    JSONtipoPago.put("id_tipo", idTipo); 
                    JSONtipoPago.put("nombre", nombreTP);
                    JSONtipoPago.put("nombre_corto", nombreCortoTP);
                    JSONtipoPago.put("habilitado", habilidatadoTP);
                    JSONtipoPago.put("updatedAt", createdTP);
                    JSONtipoPago.put("createdAt", updatedTP);
                       
                    JSONventa.put("tipoPago", JSONtipoPago);
                    
                    JSONventa.put("total", totalV);
                    
                    String url = "/ventas";
                    JSONObject res = RestServer.postJSONdata(url, JSONventa);
                }
                
                conn.commit();
            } catch (SQLException e) {
                //Hacemos rollback en caso de error
                try {
                    System.out.println("Entramos al rollback");
                //Imprimimos la excepcion a la consola
                    e.printStackTrace(System.out);
                //Hacemos rollback
                    conn.rollback();
                } catch (SQLException e1) {
                    e1.printStackTrace(System.out);
                }
            }
        
        }catch(Exception e){
            System.out.println("Error: "+e);
        }
    }
   
    public void insertarEmpresas(){
        JSONArray res = RestServer.getJSONArray("/empresa/"+this.id_empresa);
        Connection conn = null; 
        try {
            for (int i = 0; i < res.length(); i++) {
                 try {                    
                    conn = Conexion.getConnection();
                    if (conn.getAutoCommit()) { 
                        conn.setAutoCommit(false); 
                    } 
                    VentasDB ventasdb = new VentasDB(conn);  
                    
                    JSONObject empresa = res.getJSONObject(i);
                    int id = empresa.getInt("id");
                    String razonSocial = (empresa.get("razon_social").toString().equals("null"))? "":empresa.get("razon_social").toString();
                    String nit = (empresa.get("nit").toString().equals("null"))? "":empresa.get("nit").toString();
                    String direccion = (empresa.get("direccion").toString().equals("null"))? "":empresa.get("direccion").toString();
                    int telefonon1 = (empresa.get("telefono1").toString().equals("null"))? 0:Integer.parseInt(empresa.get("telefono1").toString());
                    int telefonon2 = (empresa.get("telefono2").toString().equals("null"))? 0:Integer.parseInt(empresa.get("telefono2").toString());
                    int telefonon3 = (empresa.get("telefono3").toString().equals("null"))? 0:Integer.parseInt(empresa.get("telefono3").toString());
                    int id_departamento = (empresa.get("id_departamento").toString().equals("null"))? 0:Integer.parseInt(empresa.get("id_departamento").toString());
                    String id_municipio = (empresa.get("id_municipio").toString().equals("null"))? "":empresa.get("id_municipio").toString();
                    boolean usar_panel = (empresa.get("usar_panel").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_panel").toString());
                    boolean usar_vencimientos = (empresa.get("usar_vencimientos").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_vencimientos").toString());
                    boolean usar_servicios = (empresa.get("usar_servicios").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_servicios").toString());
                    boolean usar_consumos = (empresa.get("usar_consumos").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_consumos").toString());
                    boolean usar_descuentos = (empresa.get("usar_descuentos").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_descuentos").toString());
                    boolean usar_georeferenciacion = (empresa.get("usar_georeferenciacion").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_georeferenciacion").toString());
                    boolean usar_pedidos = (empresa.get("usar_pedidos").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_pedidos").toString());
                    boolean usar_pantalla_cliente = (empresa.get("usar_pantalla_cliente").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_pantalla_cliente").toString());
                    boolean usar_pantalla_despacho = (empresa.get("usar_pantalla_despacho").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_pantalla_despacho").toString());
                    boolean usar_mesas = (empresa.get("usar_mesas").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_mesas").toString());
                    boolean usar_salas = (empresa.get("usar_salas").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_salas").toString());
                    boolean usar_contabilidad = (empresa.get("usar_contabilidad").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_contabilidad").toString());
                    boolean usar_medico = (empresa.get("usar_medico").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_medico").toString());
                    boolean usar_mantenimiento = (empresa.get("usar_mantenimiento").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_mantenimiento").toString());
                    boolean usar_cuentas_auxiliares = (empresa.get("usar_cuentas_auxiliares").toString().equals("null"))? false:Boolean.parseBoolean(empresa.get("usar_cuentas_auxiliares").toString());
                    String createdAt = (empresa.get("createdAt").toString().equals("null"))? "":empresa.get("createdAt").toString();
                     String updatedAt = (empresa.get("updatedAt").toString().equals("null"))? "":empresa.get("updatedAt").toString();

                    ventasdb.insertarEmpresa(id, razonSocial, nit, direccion, telefonon1, telefonon2, telefonon3, id_departamento, id_municipio, usar_panel, usar_vencimientos, usar_servicios, usar_consumos, usar_descuentos, usar_georeferenciacion, usar_pedidos, usar_pantalla_cliente, usar_pantalla_despacho, usar_mesas, usar_salas, usar_contabilidad, usar_medico, usar_mantenimiento, usar_cuentas_auxiliares, createdAt, updatedAt);
                    conn.commit();
                } catch (SQLException e) {
                    //Hacemos rollback en caso de error
                    try {
                        System.out.println("Entramos al rollback");
                    //Imprimimos la excepcion a la consola
                        e.printStackTrace(System.out);
                    //Hacemos rollback
                        conn.rollback();
                    } catch (SQLException e1) {
                        e1.printStackTrace(System.out);
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error al obtener la empresa: "+e);
        }
    }
    
    public void imprimirPDF(int id_detalle) throws FileNotFoundException {
        //Connection con;
        try {
        Connection a;
        a=DriverManager.getConnection("jdbc:derby:C:\\Users\\AGIL\\Documents\\Agil\\custom modules\\dbVentas", "","");
        JasperReport reporte = null;
        Object id = id_detalle;      
        Map parametro = new HashMap();
        parametro.put("id", id);
        reporte = (JasperReport) JRLoader.loadObjectFromFile("C:\\Users\\AGIL\\Documents\\Agil\\custom modules\\Ventas\\src\\reportes\\reporteVenta.jasper");
        JasperPrint print = JasperFillManager.fillReport(reporte, parametro, a);
        JasperViewer ver = new JasperViewer(print);
        ver.setTitle("Zonas");
        ver.setVisible(true);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al abrir el archivo: " + e);
            System.out.println("Error: "+e.getMessage());
        }
    }
     
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textoDesde = new com.toedter.calendar.JDateChooser();
        textoHasta = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        btnFiltro = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textoRazonSocial = new javax.swing.JTextField();
        textoNit = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        textoMonto = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVentas = new javax.swing.JTable();
        comboTipoPago = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        comboSucursal = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        comboMovimientos = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        textoUsuario = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        comboEstado = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        btnSincronizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(71, 143, 202));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(71, 143, 202));
        jLabel1.setText("Lista Usuarios");

        jButton1.setBackground(new java.awt.Color(27, 106, 170));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Nuevo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Filtro de Ventas");

        jLabel3.setText("Desde");

        jLabel4.setText("Periodo");

        jLabel5.setText("Hasta");

        btnFiltro.setBackground(new java.awt.Color(27, 106, 170));
        btnFiltro.setForeground(new java.awt.Color(255, 255, 255));
        btnFiltro.setText("Filtro");
        btnFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltroActionPerformed(evt);
            }
        });

        jLabel7.setText("Razon Social");

        jLabel6.setText("Filtro");

        jLabel8.setText("Nit");

        jLabel9.setText("Monto");

        jLabel10.setText("Tipo Venta");

        tablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "N°", "Transaccion", "Sucursal", "Razón Social", "Nit Cliente", "Factura", "Fecha Fact.", "Monto", "Tipo Pago", "Pago", "Usuario", "Estado", "Pagar", "Ver", "Eliminar", "Imprimir"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaVentas.setFillsViewportHeight(true);
        tablaVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaVentasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaVentas);
        if (tablaVentas.getColumnModel().getColumnCount() > 0) {
            tablaVentas.getColumnModel().getColumn(0).setMinWidth(0);
            tablaVentas.getColumnModel().getColumn(0).setPreferredWidth(0);
            tablaVentas.getColumnModel().getColumn(0).setMaxWidth(0);
            tablaVentas.getColumnModel().getColumn(1).setMinWidth(35);
            tablaVentas.getColumnModel().getColumn(1).setPreferredWidth(35);
            tablaVentas.getColumnModel().getColumn(1).setMaxWidth(35);
            tablaVentas.getColumnModel().getColumn(13).setMinWidth(60);
            tablaVentas.getColumnModel().getColumn(13).setPreferredWidth(60);
            tablaVentas.getColumnModel().getColumn(13).setMaxWidth(60);
            tablaVentas.getColumnModel().getColumn(14).setMinWidth(60);
            tablaVentas.getColumnModel().getColumn(14).setPreferredWidth(60);
            tablaVentas.getColumnModel().getColumn(14).setMaxWidth(60);
            tablaVentas.getColumnModel().getColumn(15).setMinWidth(60);
            tablaVentas.getColumnModel().getColumn(15).setPreferredWidth(60);
            tablaVentas.getColumnModel().getColumn(15).setMaxWidth(60);
            tablaVentas.getColumnModel().getColumn(16).setMinWidth(60);
            tablaVentas.getColumnModel().getColumn(16).setPreferredWidth(60);
            tablaVentas.getColumnModel().getColumn(16).setMaxWidth(60);
        }

        comboTipoPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "CREDITO", "CONTADO" }));

        jLabel11.setText("Sucursal");

        comboSucursal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS" }));

        jLabel12.setText("Transaccion");

        comboMovimientos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS" }));

        jLabel13.setText("Usuario");

        jLabel14.setText("Estado");

        comboEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "Activo", "Anulado" }));

        jButton2.setBackground(new java.awt.Color(180, 44, 38));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Cerrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnSincronizar.setBackground(new java.awt.Color(27, 106, 170));
        btnSincronizar.setForeground(new java.awt.Color(255, 255, 255));
        btnSincronizar.setText("Sincronizar");
        btnSincronizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSincronizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(textoDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(32, 32, 32)
                                        .addComponent(textoHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comboSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textoRazonSocial, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(27, 27, 27)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comboMovimientos, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textoNit, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(31, 31, 31)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textoMonto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(152, 152, 152)
                                        .addComponent(jLabel5))
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(301, 301, 301)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel10)
                                            .addComponent(comboTipoPago, 0, 121, Short.MAX_VALUE)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnFiltro)
                                        .addGap(15, 15, 15))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jButton1))
                        .addGap(44, 44, 44)
                        .addComponent(btnSincronizar)
                        .addGap(1003, 1003, 1003)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSincronizar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(btnFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(textoDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textoRazonSocial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoNit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboTipoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMovimientos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltroActionPerformed
        
        ResultSet rs = null;
        Date fechaDesde = textoDesde.getDate();
        Date fechaHasta = textoHasta.getDate();  
        String razon_social = textoRazonSocial.getText().toString();
        String nit = textoNit.getText().toString().equals("")? "":textoNit.getText().toString();
        String suc = (String) comboSucursal.getSelectedItem();
        String mov = (String) comboMovimientos.getSelectedItem();
        String act = "";
        if (comboEstado.getSelectedItem().equals("Activo")) {
             act = "true";
        }else if (comboEstado.getSelectedItem().equals("Anulado")) {
             act = "false";
        }
        try {
            if (!textoDesde.getDate().toString().isEmpty() && !textoHasta.getDate().toString().isEmpty()) {
                 limpiarTabla();
               // String d1 = ((JTextField) textoDesde.getDateEditor().getUiComponent()).getText();
               // String d2 = ((JTextField) textoHasta.getDateEditor().getUiComponent()).getText();
                long fd = fechaDesde.getTime();
                java.sql.Date desde = new java.sql.Date(fd);
                long fh = fechaHasta.getTime();
                java.sql.Date hasta = new java.sql.Date(fh);
                
                String fechas = "AND V.FECHA >= '"+desde+"' AND V.FECHA <= '"+hasta+"'";
                String razonsocial = razon_social.equals("")? "":" AND RS.RAZON_SOCIAL like '"+razon_social+"'";
                String nitquery = (nit.equals(""))? "":"AND RS.NIT = '"+nit+"'";
                String montoquery = textoMonto.getText().toString().equals("")? "":" AND V.TOTAL = INTEGER('"+textoMonto.getText().toString()+"')";
                String tipoPagoquery = comboTipoPago.getSelectedItem().equals("TODOS")? "":" AND TP.NOMBRE = '"+(String)comboTipoPago.getSelectedItem()+"'";
                String sucursalquery = comboSucursal.getSelectedItem().equals("TODOS")? "":" AND S.NOMBRE = '"+suc+"'";
                String movimientoquery = comboMovimientos.getSelectedItem().equals("TODOS")? "":" AND C.NOMBRE = '"+mov+"'";
                String usuarioquery = (textoUsuario.getText().equals(""))? "":" AND U.NOMBRE_USUARIO LIKE '%"+textoUsuario.getText()+"%'";
                String estadoquery = comboEstado.getSelectedItem().equals("TODOS")? "":" AND V.ACTIVA = '"+act+"'";
                
                String consulta = "SELECT C.NOMBRE,S.NOMBRE,RS.RAZON_SOCIAL,RS.NIT,V.FACTURA,V.FECHA,V.TOTAL,TP.NOMBRE,V.SALDO,U.NOMBRE_USUARIO,V.ACTIVA,V.ID\n" +
                    "FROM INV_VENTA AS V \n" +
                    "INNER JOIN INV_MOVIMIENTO AS M ON  M.ID = V.MOVIMIENTO\n" +
                    "LEFT JOIN CLASE AS C ON M.CLASE = C.ID\n" +
                    "INNER JOIN ALMACEN AS A ON A.ID = V.ALMACEN\n" +
                    "LEFT JOIN SUCURSAL AS S ON S.ID = A.SUCURSAL\n" +
                    "LEFT JOIN CLIENTE AS RS ON RS.ID = INTEGER(V.CLIENTE)\n" +
                    "LEFT JOIN CLASE AS TP ON TP.ID = V.TIPO_PAGO\n" +
                    "LEFT JOIN USUARIO AS U ON U.ID = V.USUARIO\n" +
                    "WHERE S.EMPRESA = "+this.id_empresa+" "+fechas+""+razonsocial+""+nitquery+""+montoquery+""+
                        tipoPagoquery+""+sucursalquery+""+movimientoquery+""+usuarioquery+""+estadoquery;
               
                try {
                    int cont = 1;
                    rs = db.seleccionar(consulta);
                    while(rs.next()){
                        String transaccion = rs.getString(1);
                        String sucursal = rs.getString(2);
                        String razonSocial = rs.getString(3);
                        String nitCliente = rs.getString(4);
                        String factura = rs.getString(5);
                        String fechaFact = rs.getDate(6).toString();
                        String monto = Double.toString(rs.getDouble(7));
                        String tipoPago = rs.getString(8);
                        String saldo = Double.toString(rs.getDouble(9));
                        String nombreUsuario = rs.getString(10);
                        boolean activa = rs.getBoolean(11);
                        int id = rs.getInt(12);
                        
                        if (activa == true) {
                            Object[] datos = {id,cont,transaccion,sucursal,razonSocial,nitCliente,factura,fechaFact,monto,tipoPago,saldo,nombreUsuario,"Activo",btnPagar,btnVer,btnEliminar,btnImprimir};
                            cont = cont + 1;
                            modelTabla.addRow(datos);
                        } else {
                            Object[] datos = {id,cont,transaccion,sucursal,razonSocial,nitCliente,factura,fechaFact,monto,tipoPago,saldo,nombreUsuario,"Anulado",btnPagar,btnVer,btnEliminar,btnImprimir};
                            cont = cont + 1;
                            modelTabla.addRow(datos);
                        }
                        
                        
                        
                    }
                    tablaVentas.setModel(modelTabla);
                } catch (Exception e) {
                    System.out.println("Error al recoger el filtro: "+e);
                }
            }
 
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ingresar la fecha");
        }
    }//GEN-LAST:event_btnFiltroActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        VentasUI  ventas = new VentasUI(this.id_usuario, this.id_empresa);
        ventas.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnSincronizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSincronizarActionPerformed
        if (getConnectionStatus() == true) {
            sincronizar();
        }else{
            JOptionPane.showMessageDialog(null, "No tiene conexion con el servidor.!");
        }
    }//GEN-LAST:event_btnSincronizarActionPerformed

    private void tablaVentasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaVentasMouseClicked
        int columna = tablaVentas.getColumnModel().getColumnIndexAtX(evt.getX());
        int fila = evt.getY() / tablaVentas.getRowHeight();;

        if (fila < tablaVentas.getRowCount() && fila >= 0 && columna < tablaVentas.getColumnCount() && columna >= 0) {
            Object value = tablaVentas.getValueAt(fila, columna);

            if (value instanceof JButton) {
                ((JButton) value).doClick();
                JButton botonAccion = (JButton) value;

                if (botonAccion.getName().equals("pagar")) {                  
                    int idVenta = Integer.valueOf(String.valueOf(tablaVentas.getValueAt(0, 0)));
                   
                    Pagos pagos = new Pagos(this,true,this.id_usuario,this.id_empresa,idVenta); 
                    pagos.setVisible(true);
                    //System.out.println("boton clicleable");
                }
                
                if (botonAccion.getName().equals("ver")) {
                    int idVenta = Integer.valueOf(String.valueOf(tablaVentas.getValueAt(0, 0))); 
                    
                    VerDetalles ver = new VerDetalles(this, true, this.id_usuario, this.id_empresa, idVenta);
                    ver.setVisible(true);
                }
                
                if (botonAccion.getName().equals("eliminar")) {
                    int idVenta = Integer.valueOf(String.valueOf(tablaVentas.getValueAt(0, 0))); 
                    int resp = JOptionPane.showConfirmDialog(this, "Desea eliminar la venta ", "Alerta!", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);

                    if(resp == 0){
                        try{
                            String url = "/ventas/"+idVenta;
                            RestServer.delete(url);
                        }catch(Exception e){
                            System.out.println("error: "+e);
                        }
                    }
                }
                
                if (botonAccion.getName().equals("impresion")) {
                    int idVenta = Integer.valueOf(String.valueOf(tablaVentas.getValueAt(0, 0))); 
                    int res = JOptionPane.showConfirmDialog(this, "Desea sacar un dpf de la venta?","Alerta!",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
                    
                    if (res == 0) {
                        try {
                            imprimirPDF(idVenta);
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(ListarVentasUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } 
                }
            }
            
        }
    }//GEN-LAST:event_tablaVentasMouseClicked

    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFiltro;
    private javax.swing.JButton btnSincronizar;
    private javax.swing.JComboBox<String> comboEstado;
    private javax.swing.JComboBox<String> comboMovimientos;
    private javax.swing.JComboBox<String> comboSucursal;
    private javax.swing.JComboBox<String> comboTipoPago;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tablaVentas;
    private com.toedter.calendar.JDateChooser textoDesde;
    private com.toedter.calendar.JDateChooser textoHasta;
    private javax.swing.JTextField textoMonto;
    private javax.swing.JTextField textoNit;
    private javax.swing.JTextField textoRazonSocial;
    private javax.swing.JTextField textoUsuario;
    // End of variables declaration//GEN-END:variables
}
